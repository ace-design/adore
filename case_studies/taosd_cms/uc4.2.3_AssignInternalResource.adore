require 'common.adore';

/*
WARNING : Variable never used :
Pbme: The variables accept is never used
Solution : He will add a dedicated fragment as asked in the requirement document.


*/
orchestration cms::assignIntRes {
  variables {
    e as cmsEmployee; m as mission; accept as boolean;
  }
  activities {
    rcv. (e,m) := receive();
    a1. ui::sendMissionInfo(e,m);
    a2. accept := ui::wait4Acceptance(e,m);
    rpl. reply();
  }
  relations { rcv < a1; a1 < a2; a2 < rpl; }
}


fragment unavailableEmployee<delta> {
  variables {
    const true := 'true' as boolean; const false := 'false' as boolean;
    delta as integer; expired as boolean; c as boolean;
    e as cmsEmployee; subst as cmsEmployee; r as boolean; m as mission;
  }
  activities {
    a0. expired := false;
    h. hook(e,m);
    a1. stopwatch::sleep(delta);
    a2. expired := true ;
    a3. c := isTrue(expired);
    a4. msgBus::send('status' as string, 'unresponsive' as string,e); 
    a5. subst := cms::findSubstitute(e);
    a6. r := self::self(subst,m);
    rpl. reply();
    thr. throw('unavailable' as string);
  }
  relations {
    ^ < a0; a0 < h; h << a3; a0 < a1; a1 < a2; a2 << a3;
    a3 < a4 when c; a3 < a5 when c; a3 < $ when !c;
    a5 < a6; a6 < rpl; fail(a5,'noSubstituteFound') < thr;
  }
}

fragment employeeRefusal {
  variables {
    e as cmsEmployee; subst as cmsEmployee; m as mission;
    ok as boolean; r as boolean;
  }
  activities {
    h. ok := hook(e,m);
    a1. msgBus::send('info' as string, 'refusal' as string,e); 
    a2. subst := cms::findSubstitute(e);
    a3. r := self::self(subst,m);
    rpl. reply();
    thr. throw('unavailable' as string);
  }
  relations {
    ^ < h; h < $ when ok;
    h < a1 when ! ok; a1 < a2; a2 < a3; a3 < rpl; 
    fail(a2,'noSubstituteFound') < thr;
  }
}

composition cms::assignIntRes {
  apply mustAuthenticate      => a1;      // Ext 1a.
  apply unavailableEmployee(delta : '10') => {a1,a2}; // Ext 1b.
  apply employeeRefusal       => a2;      // Ext 2a.
}


