/*
WARNING : Orchestration returns when an activity can continue to be executed
Pbme: In this example, the message is sent when the orchestration returns.
Solution : He adds knowledge to avoid warnings.
Knowledge : 
disableWarning('returnBeforeToComplet',cms::captureWitnessReport, a51)
disableWarning('returnBeforeToComplet',cms::captureWitnessReport, a11)

WARNING : Unused variable
Knowledge : the activity a2a3 returns a variable "exact" which is never used.
Solution : He will add a dedicated fragment as asked in the requirement document.

*/

orchestration cms::captureWitnessReport {
  variables {
    id as crisisIdentifier; coord as cmsEmployee;
    wi as witness; i as preliminaryInformation;
    ccl as crisisCheckList; ci as crisisInformation;
    pi as phoneInformation; exact as boolean;
  }
  activities {
    rcv. (coord, id) := receive();
    a10. wi := ui::promptWitnessInfo(coord);
    a11. cms::setWitness(wi,id);
    a2. i := ui::promptPrelimInfo(coord);
    a2a12. pi := phoneCie::getInfo(wi.id);
    a2a3. exact := cms::validateWitnessInfo(wi,pi);
    a3. ccl := cms::buildCheckList(i);
    a4. ci := ui::promptCheckList(coord,id, ccl);
    a50. cms::assignEmergencyLvl(id,ci);
    a51. msgBus::send('status' as string, 'active' as string,id);
    rpl. reply();
  }
  relations {
    rcv < a10; a10 < a11; a10 < a2; a2 < a3; a3 < a4; a4 < a50; 
    a50 < rpl; a10 < a2a12; a2a12 < a2a3; a2a3 < a50; a50 < a51;
  }
}

fragment callDisconnected {
  variables {}
  activities { h. hook(); thr. throw('lostWitnessContact' as string); }
  relations { ^ < h; h < $; fail(h,'disconnected') < thr; }
}

fragment ignoreDisconnection {
  variables {}
  activities { h. hook(); }
  relations { ^ < h; h < $; fail(h,'disconnected') < $; }
}

/*
WARNING : Orchestration returns when an activity can continue to be executed
Pbme: In this example, the message is sent when the orchestration returns.
Solution : He adds knowledge to avoid warnings.
Knowledge : 
disableWarning('returnBeforeToComplet',requestVideo, t)
disableWarning('returnBeforeToComplet',requestVideo, a12)
disableWarning('returnBeforeToComplet',requestVideo, a3)

*/
fragment requestVideo<user> {
  variables {
    c as boolean; info as preliminaryInformation;
    user as cmsEmployee; feedId as videoFeedIdentifier;
  }
  activities {
    t. c := survSys::canCover(info.loc);
    h. hook(info);
    a12. feedId := survSys::activateVideo(info.loc);
    a3. ui::displayVideoFeed(user, feedId); 
  }
  relations { ^ < h; h < $; ^ < t; t < a12 when c; a12 < a3; }
}

fragment fakeWitnessInfo {
  variables {
    witInfo as witness; phInfo as phoneInformation;
    isValid as boolean;
  }
  activities {
    h. isValid := hook(witInfo,phInfo); 
    thr. throw('fakeWitnessInformation' as string);
  }
  relations {
    ^ < h; h < $ when isValid; h < thr when ! isValid;
  }
}

fragment fakeCrisisDetected {
  variables { user as cmsEmployee; isReal as boolean; }
  activities {
    h. hook(user);
    t. isReal := ui::prompt4RealCrisis(user);
    thr. throw('fakeCrisis' as string);
  }
  relations { ^ < h; h < t; t < $ when isReal; t < thr when ! isReal; }
}

composition cms::captureWitnessReport{
  apply callDisconnected            => a10;     // Ext 1a.
  apply callDisconnected            => a2;      // Ext 2a. 
  apply requestVideo(user: 'coord') => {a3,a4}; // Ext 3a.
  apply ignoreDisconnection         => a4;      // Ext 4a.
  apply fakeWitnessInfo     => a2a3;    // Ext 5a. (Rq: too weird on a5 :S )
  apply fakeCrisisDetected  => a4;      // Ext 5b. (Rq: too weird on a5 :S )
  apply fakeCrisisDetected  => requestVideo::a3; // Ext 5b. impacts Ext 3a.
}
