orchestration cms::execRescMission {
  variables {
     mis as mission; wrk as worker; crs as crisis;
     injRep as injuryReport; id as idRef;
     hst as medicalHistory; hosp as hospital;
  }
  activities {
    rcv. (wrk, crs, mis) := receive();
    a1. injRep := ui::promptVictimDescription(wrk) ;
    a2. id := ui::promptVictimIdentity(wrk);
    a3. hst := hospitals::getHistory(id);
    a40. hosp := cms::identifyAppropriateHospital(injRep,mis.loc);
    a41. ui::displayDestination(wrk,hosp);
    a5. msgBus::wait4msg('info' as string, 'leaving' as string, wrk);
    a6. msgBus::wait4msg('info' as string, 'victimDropped' as string, wrk);
    a7. msgBus::send('status' as string, 'success' as string, mis);
    rpl. reply();
  }
  relations {
    rcv < a1 ; a1 < a40; a40 < a41; a41 < a5; a5 < a6; a6 < a7; a7 < rpl;
    rcv < a2; a2 < a3; rcv < a1; fail(a2, 'cancel') < a40; a3 < a40;
  }
}

fragment retrieveVictimHistory<report> {
  variables {
    wrk as worker; hosp as hospital; history as medicalHistory; 
    c as boolean; report as injuryReport;
  }
  activities {
    h. hook(wrk, hosp);
    a1. history := hospitals::guessHistory(hosp,report);
    t. c := isNotNull(history);
    a2. ui::displayHistory(wrk, history);
  }
  relations { 
    ^ < h; h < $ ; ^ < a1; a1 < t; t < a2 when c; a2 < $; t < $ when !c;
  }
}
composition cms::execRescMission {
  apply retrieveVictimHistory(report: 'injRep') => a41; 
}
