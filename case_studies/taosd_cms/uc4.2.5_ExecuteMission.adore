orchestration cms::executeMission {
  variables {
    mis as mission; wrk as worker; crs as crisis; coord as cmsEmployee;
    isSupObs as boolean; isRescue as boolean; 
    isHelicopter as boolean; isTow as boolean;
  }
  activities {
    rcv. (mis, wrk, crs, coord) := receive();
    t1. isSupObs := isEqualsTo(mis.kind, 'superObs' as string);
    a1. cms::execSupObsMission(mis,wrk,crs,coord);
    t2. isRescue := isEqualsTo(mis.kind, 'rescue' as string);
    a2. cms::execRescMission(mis,wrk,crs,coord);
    t3. isHelicopter := isEqualsTo(mis.kind, 'helicopter' as string);
    a3. cms::transportByHelicopter(wrk,mis.loc);
    t4. isTow := isEqualsTo(mis.kind, 'removeObstacle' as string);
    a4. cms::performTow(wrk,mis);
    rpl. reply() ;
  }
  relations {
    rcv < t1; t1 < a1 when isSupObs; a1 << rpl; 
    rcv < t2; t2 < a2 when isRescue; a2 << rpl; 
    rcv < t3; t3 < a3 when isHelicopter; a3 << rpl; 
    rcv < t4; t4 < a4 when isTow; a4 << rpl; 
  }
}
