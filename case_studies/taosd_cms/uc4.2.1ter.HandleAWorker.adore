require 'common.adore';

/*
Remarks : 
- A fragment is well-formed if all the variable used as input are earlier initialized inside the fragment or are generic parameter.
If they correspond to generic parameter they have to be initialised before.
This error is only detected when the set of fragments has been applied to the final orchestration.

- self::self is unified with an invocation to the orchestration on which the fragment is applied. The arguments of this call are unified with the arguments of the receive.

 */

orchestration cms::handleAWorker {
  variables {
    crisis as crisisIdentifier;
    w as worker; r as report; m as mission; coord as cmsEmployee;
  }
  activities {
    rcv. (crisis,w,m,coord) := receive();
    a100. ui::actListener(w, crisis, 'info' as string);
    a101. ui::actListener(w, m, 'info' as string);
    a6. msgBus::wait4Msg('info' as string, 'arrived' as string, w);
    a7. cms::executeMission(m,w,crisis,coord);
    a8. msgBus::wait4Msg('info' as string, 'leaving' as string, w);
    a11. r := ui::askForReport(w);
    rpl. reply(r);
    a100bis. ui::stopListener(w,crisis, 'info' as string);
    a101bis. ui::stopListener(w, m, 'info' as string);
  }
  relations {
    rcv < a100; rcv < a101; a100 < a6; a101 < a6; 
    a6 < a7; a7 < a8; a8 < a11 ; a11 < rpl;
    a8 < a100bis; a8 < a101bis;
  }
}

fragment useHelicopter<m,coord> {
  variables {
    w as worker;  
    r as boolean;   m as mission; ok as boolean;
    coord as cmsEmployee;
  }
  activities {
    a1. r := cms::helicopterRequired(m);
    h. hook(w);
    a2. ok := ui::ask4Helicopter(coord,w,m);
    a3. cms::transportByHelicopter(w,m.loc);
  }
  relations {
    ^ < a1; a1 < h when ! r;  a1 < a2 when r;
    a2 < a3 when ok; a2 < h when !ok; a3 < h; h < $;
  }
}


fragment lostContact<action,c> {
  variables {
    c as crisisIdentifier; w as worker;
    super as cmsEmployee;
  }
  activities {
    a1. msg::wait4Msg('info' as string, 'lost' as string, w);
    a2. super := cms::getSuperObserver(c);
    a3. ui::action(super,w);
    h. hook(w,c);
  }
  relations { ^ < a1; ^ < h; h << $; a1 < a2; a2 < a3; a3 << $; }
}

//noConflict('concurrentAccess', 'timeout_a2','timeout_a3').
fragment timeout<delay,action> {
  variables {
    w as worker; delay as integer;
    const true := 'true' as boolean;
    const false := 'false' as boolean;    
    c as boolean; expired as boolean;
    r as report;
  }
  activities {
    a0. expired := false;
    h. hook(w);
    a1. stopwatch::sleep(delay);
    a2. expired := true;
    a3. c := isTrue(expired);
    a4. ui::action(w);
    a5. r := self::self();
    a6. reply(r);
  }
  relations {
    ^ < a0; a0 < h; a0 < a1; a1 < a2; h << a3; a2 << a3;
    a3 < a4 when c; a4 < a5; a5 < a6; a3 < $ when !c;
  }
}


fragment extraMissionsRequired<crisis> {
  variables {
    m as mission; crisis as crisisIdentifier;
  }
  activities {
    h. hook(m);
    a1. msgBus::wait4msg('status' as string, 'extra' as string, m);
    a2. cms::handleCrisis(crisis);
  }
  relations {
    ^ < h; ^ < a1; h < $; a1 < a2; 
  }
}


fragment missionFailed {
  variables {
    m as mission; crisis as crisisIdentifier;
  }
  activities { 
    h. hook(crisis,m);
    a1. msgBus::send('status' as string, 'failed' as string, m);
    a2. cms::handleCrisis(crisis);
    a3. reply();
  }
  relations { ^ < h; h < $; fail(h,'failed') < a1; a1 < a2; a2 < a3; }
}

fragment missingReport {
  variables { r as report; w as worker; }
  activities {
    h. r := hook(w);
    a1. r := id('null' as report);
  }
  relations { ^ < h; fail(h) < a1; h << $; a1 << $; }
}

composition cms::handleAWorker {
  apply useHelicopter(m: 'm')               => a6; // Ext 6a.
  apply lostContact(action: 'requestForArrival', c : 'crisis') => a6; // Ext 6b.
  apply timeout(delay: 'm.delay',action: 'updateLocation')  => a6; // Ext 6c.
  apply reHandleOnChange(cxt: 'm', crisis: 'crisis')         => a7; // Ext 7a.
  apply missionFailed()                     => a7; // Ext 7b.
  apply lostContact(action: 'requestForDeparture', c : 'crisis') => a8; //Ext 8a.
  // Ext 8b. can't be performed without a huge set of changes in the workflow
  apply missingReport                                       => a11; // Ext 11a. 
}
