orchestration cms::execSupObsMission {
  variables {
    so as cmsEmployee; crisis as crisisIdentifier; m* as mission; 
    ccl as crisisCheckList;
  }
  activities {
    rcv. (so,crisis) := receive();
    a1. ccl := cms::buildCrisisCheckList(crisis);
    a2. ui::promptCheckList(so,ccl);
    a3. m* := cms::recommendSupObsMission(crisis);
    aX. cms::handleSupObsMissions(m*,so,crisis);
    rpl. reply();
  }
  relations { rcv < a1; a1 < a2; a2 < a3; a3 < aX; aX < rpl; }
}


/*
Result From 

}

*/

orchestration cms::handleSupObsMissions {
  variables {
    so as cmsEmployee; crisis as crisisIdentifier; m* as mission; 
    choosen as mission; mr as misisonRequest; mi as missionInformation;
    ack as boolean; quit as boolean;

     rM_subst* as mission;
     rM_nAR_c as boolean;

    aMF_subst* as mission; 
  }
  activities {
    rcv. (m*, so, crisis) := receive();
    a4. choosen := ui::selectMission(so,m*);
    a5. mr := cms::buildMissionRequest(choosen);
    a6. mi := ui::promptMissionRequest(mr);
    a7. ack := cms::submitMission(mi);
    a8. msgBus::wait4Msg('status' as string, 'success' as string, mi);
    t. quit := ui::prompt4departure(so);
    a91. m* := cms::recommendSupObsMission(crisis);
    a92. cms::handleSupObsMissions(m*, so, crisis);
    rpl. reply();
    a93. msgBus::send('info' as string, 'leaving' as string,so);


    aMF_a1. msgBus::wait4Msg('status' as string, 'fail' as string, mi);
    aMF_a2. aMF_subst* := cms::recommendSupObsMission(crisis);
    aMF_a3. self::self(aMF_subst*); 

    rM_a1. rM_subst* := cms::findEquivalentMissions(mi);
    rM_a2. cms::handleSupObsMissions(rM_subst*, so, crisis);
    rM_a3. reply();

    rM_nAR_t. rM_nAR_c := isEmptySet(rM_subst*);
    rM_nAR_a1. ui::promptNotifyNtlCrisisCtr(so);

  }
  relations {
    rcv < a4; a4 < a5; a5 < a6; a6 < a7; 
    //a7 < a8; a7 < t;
    t < rpl when quit; t < a91 when ! quit; a91 < a92; a92 < rpl;
    rpl < a93; //a8 < rpl;


 a7 < a8 when ack; a7 < t when ack; a7 < rM_a1 when !ack; //rM_a1 < rM_a2; 
 rM_a2 < rM_a3;
rM_a1 < rM_nAR_t; rM_nAR_t < rM_a2 when !rM_nAR_c; rM_nAR_t < rM_nAR_a1 when rM_nAR_c; rM_nAR_a1 < rM_a2;


    a8 << rpl;  
    a7 < aMF_a1 when ack; aMF_a1 < aMF_a2; aMF_a2 < aMF_a3; aMF_a3 << rpl;

  }
}



fragment replaceMissionAndnAR {
  variables {
  mi as missionInformation; ack as boolean;
user as cmsEmployee;
    rM_subst* as mission;

    rM_nAR_c as boolean;
  }
  activities {
    h. ack := hook(mi);
    rM_a1. rM_subst* := cms::findEquivalentMissions(mi);
    rM_a2. self::self(rM_subst*); 
    rM_a3. reply();

    rM_nAR_t. rM_nAR_c := isEmptySet(rM_subst*);
    rM_nAR_a1. ui::promptNotifyNtlCrisisCtr(user);
  }
  relations { 
    h < $ when ack; h < rM_a1 when !ack; //rM_a1 < rM_a2; 
 rM_a2 < rM_a3;
rM_a1 < rM_nAR_t; rM_nAR_t < rM_a2 when !rM_nAR_c; rM_nAR_t < rM_nAR_a1 when rM_nAR_c; rM_nAR_a1 < rM_a2;


}
}

/*
fragment noAvailableReplacement<user> {
  variables {
    m* as mission;
    user as cmsEmployee; c as boolean;
  }
  activities {
    h. m* := hook();
    t. c := isEmptySet(m*);
    a1. ui::promptNotifyNtlCrisisCtr(user);
  }
  relations { a1 < rM_nAR_t; rM_nAR_t < a2 when !rM_nAR_c; rM_nAR_t < rM_nAR_a1 when rM_nAR_c; rM_nAR_a1 < a2; }
} 

*/
