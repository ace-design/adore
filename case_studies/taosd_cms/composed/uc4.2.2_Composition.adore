/*

WARNING : Multiple exceptions can be thrown under the same "formel" conditions.
Pbme : fakeCrisis, fakeWitnessInformation are errors that can be thrown in a concurrent way. 
Solution : As designer doesn't want to introduce useless waiting beetween activities that throw these errors. He adds Knowledge.
Knowledge : 
disableWarning('multipleExceptions',cms::captureWitnessReport, 'fakeWitnessInformation','fakeCrisis')

WARNING : Conflicts = [warning(areTheseActivitiesDuplicated, [cms_captureWitnessReport_fCD0_t, cms_captureWitnessReport_rV_fCD_t])] 
Solution : 
We assume UI will managed concurrent popup? The pbme has to be solved.

WARNING : 
Conflicts = [warning(noComplementaryBranchFor, cms_captureWitnessReport, [ (cms_captureWitnessReport_rV_t, cms_captureWitnessReport_rV_c, true), (cms_captureWitnessReport_rV_fCD_t, cms_captureWitnessReport_rV_fCD_isReal, false)])] 
Solution : It's OK. This branches are complementary they are not required to reply.
Knowledge:


[warning('ConcurrentEnd', cms_captureWitnessReport, [cms_captureWitnessReport_rpl, cms_captureWitnessReport_rV_fCD_thr])],

 [warning('ConcurrentEnd', cms_captureWitnessReport, [cms_captureWitnessReport_cD1_thr, cms_captureWitnessReport_fWI_thr])],
 [warning('ConcurrentEnd', cms_captureWitnessReport, [cms_captureWitnessReport_fWI_thr, cms_captureWitnessReport_fCD0_thr])], 
[warning('ConcurrentEnd', cms_captureWitnessReport, [cms_captureWitnessReport_fWI_thr, cms_captureWitnessReport_rV_fCD_thr])], [warning('ConcurrentEnd', cms_captureWitnessReport, [cms_captureWitnessReport_fCD0_thr, cms_captureWitnessReport_rV_fCD_thr])]] ;



composition cms::captureWitnessReport{
  apply callDisconnected            => a10;     // Ext 1a.
  apply callDisconnected            => a2;      // Ext 2a. 
  apply requestVideo(user: 'coord') => {a3,a4}; // Ext 3a.
  apply ignoreDisconnection         => a4;      // Ext 4a.
  apply fakeWitnessInfo     => a2a3;    // Ext 5a. (Rq: too weird on a5 :S )
  apply fakeCrisisDetected  => a4;      // Ext 5b. (Rq: too weird on a5 :S )
  apply fakeCrisisDetected  => requestVideo::a3; // Ext 5b. impacts Ext 3a.
}
*/



orchestration cms::captureWitnessReport {
  variables {
    id as crisisIdentifier; coord as cmsEmployee;
    wi as witness; i as preliminaryInformation;
    ccl as crisisCheckList; ci as crisisInformation;
    pi as phoneInformation; exact as boolean;

   rV_c as boolean; 
   rV_feedId as videoFeedIdentifier;
   rV_fCD_isReal as boolean;

   fCD0_isReal as boolean; 
  }
  activities {
    rcv. (coord, id) := receive();
    a10. wi := ui::promptWitnessInfo(coord);
    a11. cms::setWitness(wi,id);
    a2. i := ui::promptPrelimInfo(coord);
    a2a12. pi := phoneCie::getInfo(wi.id);
    a2a3. exact := cms::validateWitnessInfo(wi,pi);
    a3. ccl := cms::buildCheckList(i);
    a4. ci := ui::promptCheckList(coord,id, ccl);
    a50. cms::assignEmergencyLvl(id,ci);
    a51. msgBus::send('status' as string, 'active' as string,id);
    rpl. reply();

    cD0_thr. throw('lostWitnessContact' as string);
    cD1_thr. throw('lostWitnessContact' as string);

    rV_t. rV_c := survSys::canCover(i.loc);
    rV_a12. rV_feedId := survSys::activateVideo(i.loc);
    rV_a3. ui::displayVideoFeed(coord, rV_feedId);

    fWI_thr. throw('fakeWitnessInformation' as string);


    fCD0_t. fCD0_isReal := ui::prompt4RealCrisis(coord);
    fCD0_thr. throw('fakeCrisis' as string);

   rV_fCD_t. rV_fCD_isReal := ui::prompt4RealCrisis(coord);
   rV_fCD_thr. throw('fakeCrisis' as string);
  }
  relations {
    rcv < a10; a10 < a11; a10 < a2; a2 < a3; a3 < a4; a4 < a50; 
    a50 < rpl; a10 < a2a12; a2a12 < a2a3;  
    //a2a3 < a50; 
    a50 < a51;

    fail(a10,'disconnected') < cD0_thr;
    fail(a2,'disconnected') < cD1_thr;

    a2 < rV_t; rV_t < rV_a12 when rV_c; rV_a12 < rV_a3; 
   rV_a12 < rV_fCD_t; rV_fCD_t < rV_fCD_thr when ! rV_fCD_isReal;

    fail(a4,'disconnected') < a50;

    a2a3 < a50 when exact; a2a3 < fWI_thr when ! exact;

    a3 < fCD0_t; fCD0_t < a50 when fCD0_isReal; fCD0_t < fCD0_thr when ! fCD0_isReal;

  }
}


/*
  apply fakeCrisisDetected  => requestVideo::a3; // Ext 5b. impacts Ext 3a.
*/

fragment requestVideo<user> {
  variables {
    c as boolean; info as preliminaryInformation;
    user as cmsEmployee; feedId as videoFeedIdentifier;

   fCD_isReal as boolean;
  }
  activities {
    t. c := survSys::canCover(info.loc);
    h. hook(info);
    a12. feedId := survSys::activateVideo(info.loc);
    a3. ui::displayVideoFeed(user, feedId); 

    fCD_t. fCD_isReal := ui::prompt4RealCrisis(user);
    fCD_thr. throw('fakeCrisis' as string);
  }
  relations { ^ < h; 
              h < $; t < a12 when c; a12 < a3; 
              h<t ; 
 a12 < fCD_t; fCD_t < fCD_thr when ! fCD_isReal;}
}


