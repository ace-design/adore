/*
result from 
composition cms::execRescMission {
    apply retrieveVictimHistory(wrk: 'wrk') => a3;
}
 */

orchestration cms::execRescMission {
  variables {
     mis as mission; wrk as worker; crs as crisis;
     injRep as injuryReport; id as idRef;
     hst as medicalHistory; hosp as hospital;

    rVH_history as medicalHistory; 
    rVH_c as boolean; rVH_report as injuryReport;
  }
  activities {
    rcv. (wrk, crs, mis) := receive();
    a1. injRep := ui::promptVictimDescription(wrk) ;
    a2. id := ui::promptVictimIdentity(wrk);
    a3. hospitals::requestHistory(id);
    a40. hosp := cms::identifyAppropriateHospital(injRep,mis.loc);
    a41. ui::displayDestination(wrk,hosp);
    a5. msgBus::wait4msg('info' as string, 'leaving' as string, wrk);
    a6. msgBus::wait4msg('info' as string, 'victimDropped' as string, wrk);
    a7. msgBus::send('status' as string, 'success' as string, mis);
    rpl. reply();

    rVH_a1. rVH_history := hospitals::guessHistory(id);
    rVH_t. rVH_c := isNotNull(rVH_history);
    rVH_a2. ui::displayHistory(wrk, rVH_history);
  }
  relations {
    rcv < a1 ; a1 < a40; a40 < a41; a41 < a5; a5 < a6; a6 < a7; a7 < rpl;
    rcv < a2; a2 < a3; rcv < a1; fail(a2, 'cancel') < a40; //a3 < a40;
    fail(a3, 'fail') < a40;

   a3 < rVH_a1; rVH_a1 < rVH_t; rVH_t < rVH_a2 when rVH_c; rVH_a2 < a40; rVH_t <  a40 when !rVH_c;
  }
}

