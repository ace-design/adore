orchestration cms::handleACrisis {
  variables {
    id as crisisIdentifier; coord as cmsEmployee;
    m* as mission; choosen as mission;

    rHOC_mustWait as boolean; rHOC_c as boolean;
  }
  activities {
    rcv. (coord, id) := receive();
    a2. m* := cms::recommendMission(id);
    a3. choosen := ui::selectMission(coord,m*);
    aX. cms::handleAMission(coord,id, choosen);
    rpl. reply();


    rHOC_a0. rHOC_mustWait := id('false' as boolean);
    rHOC_a1. msgBus::wait4msg('status' as string, 'change' as string, id);
    rHOC_a2. rHOC_mustWait := id('true' as boolean);
    rHOC_t. rHOC_c := isTrue(rHOC_mustWait);
    rHOC_a3. cms::handleACrisis(id);
    rHOC_a4. nop();


  }
  relations { 
    rcv < a2; a2 < a3;  
    a3 < aX; 

     aX << rHOC_t; rHOC_t < rpl when !rHOC_c; a3< rHOC_a0; 
    rHOC_a0 < rHOC_a1; rHOC_a1 < rHOC_a2; rHOC_a2 << rHOC_t; 
    rHOC_a1 < rHOC_a3; rHOC_a3 < rHOC_a4; rHOC_t < rHOC_a4 when rHOC_c; 
    rHOC_a4 < rpl;

  }
}

%%% DISENGAGE %%%
doSetify(cms_handleACrisis, cms_handleACrisis_choosen),
%%% ENGAGE %%%

fragment nop_1 {
  variables {}
  activities { n. nop(); }
}
