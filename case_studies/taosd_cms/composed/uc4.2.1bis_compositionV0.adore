/*
I think we could forget this version as the same problem occurs in moving the reHandleOnChange.


ERROR : This version fails because we can't compute a data flow when there can be several outputs.

SUGGESTION : Moreover this version fails in applying reHandleOnChange at two activities when we need only on one.

Result of : 

composition cms::handleAMission {
  toSet ir; toSet er;                  // Main success scenario
  apply unavailableIntResource                      => a41; // Ext 4a.
  apply unavailableExtResource                      =>  {a51;a5x;} // Ext 5a.
  apply reHandleOnChange(cxt: 'm', crisis: 'crisis') => a4x; // Ext 9a.
  apply reHandleOnChange(cxt: 'm', crisis: 'crisis') => a5x; // Ext 9a.
}

}
*/



orchestration cms::handleAMission {
  variables {
    crisis as crisisIdentifier;
    m as mission;      coord as cmsEmployee;
    ir as resource; er as resource;
    iw as cmsEmployee; ew as externalWorker;
    irep as report; erep as report;

    rHOC_mustWait as boolean; rHOC_c as boolean;

    rHOC1_mustWait as boolean; rHOC1_c as boolean;

    //ir* as resource;
    //irep* as report;
  }
  activities {
    rcv. (coord,crisis, m) := receive();
    a9. ui::actListener(coord,m,'status' as string); 
    //a40. ir := get(m,'intResource' as string);
    a40. ir := get(m,'intResource' as string);
    a41. iw := cms::findRelevantEmployee(ir);
    a42. cms::assignIntRes(iw,m);
    a4x. irep := cms::handleAWorker(crisis,iw, m);

    a50. er := get(m,'extResource' as string);
    a51. ew := cms::requestExtRes(er,crisis,m);
    a5x. erep := cms::handleAWorker(crisis, ew, m,coord);
    rpl. reply();
    a9bis. ui::stopListener(coord, m, 'status' as string); 

    uIR_a1. msgBus::send('status' as string,'unavailable' as string, ir);
    uIR_a2. iw := cms::requestExtRes(ir,crisis,m);

    uER_a1. msgBus::send('status' as string, 'unavailable' as string, er);
    uER_a2. cms::handleCrisis(crisis);

    rHOC_a0. rHOC_mustWait := id('false' as boolean);
    rHOC_a1. msgBus::wait4msg('status' as string, 'change' as string, m);
    rHOC_a2. rHOC_mustWait := id('true' as boolean);
    rHOC_t. rHOC_c := isTrue(rHOC_mustWait);
    rHOC_a3. cms::handleACrisis(crisis);
    rHOC_a4. nop();

    rHOC1_a0. rHOC1_mustWait := id('false' as boolean);
    rHOC1_a1. msgBus::wait4msg('status' as string, 'change' as string, m);
    rHOC1_a2. rHOC1_mustWait := id('true' as boolean);
    rHOC1_t. rHOC1_c := isTrue(rHOC1_mustWait);
    rHOC1_a3. cms::handleACrisis(crisis);
    rHOC1_a4. nop();

    //ts0. irep* := append(irep*,irep);

  }
  relations { 
    rcv < a40; a40 < a41; a41 < a42; a42 < a4x; 
    //a4x < rpl; <== toset ir
    rcv < a50; a50 < a51; a51 < a5x; 
    //a5x < rpl;
    a5x<<rpl;
    rcv < a9; a9 < a4x; a9 < a5x; rpl < a9bis; 

   fail(a41,'unavailable') < uIR_a1; uIR_a1 < uIR_a2; uIR_a2 < a4x; 

   fail(a51,'unavailable') < uER_a1;
   fail(a5x,'unavailable') < uER_a1; uER_a1 < uER_a2; uER_a2 << rpl;

    a4x << rHOC_t; rHOC_t < rpl when !rHOC_c; a42< rHOC_a0; a9< rHOC_a0;
    rHOC_a0 < rHOC_a1; rHOC_a1 < rHOC_a2; rHOC_a2 << rHOC_t; rHOC_a1 < rHOC_a3; rHOC_a3 < rHOC_a4; rHOC_t < rHOC_a4 when rHOC_c; rHOC_a4 < rpl;

  a5x<< rHOC1_t; rHOC1_t < rpl when !rHOC1_c; a9< rHOC1_a0; a51< rHOC1_a0; 
    rHOC1_a0 < rHOC1_a1; rHOC1_a1 < rHOC1_a2; rHOC1_a2 << rHOC1_t; rHOC1_a1 < rHOC1_a3; rHOC1_a3 < rHOC1_a4; rHOC1_t < rHOC1_a4 when rHOC1_c; rHOC1_a4 < rpl;

    //toset sur irep
    //a4x < ts0 ; 
    //ts0 < rpl;
 
  }
}



/*
%%% DISENGAGE %%%
    //defPolicy(hAM_ir,forall(cms_handleAMission_ir,cms_handleAMission_ir_star),none),
    //setIteration(cms_handleAMission_a41,hAM_ir),
    //setIteration(cms_handleAMission_a42,hAM_ir),
    //setIteration(cms_handleAMission_a4x,hAM_ir),
    //setIteration(cms_handleAMission_ts0,hAM_ir),
    //setIteration(cms_handleAMission_uIR_a1,hAM_ir),
    //setIteration(cms_handleAMission_uIR_a2,hAM_ir),

doSetify(cms_handleAMission,cms_handleAMission_ir),
doSetify(cms_handleAMission, cms_handleAMission_ir),
%%% ENGAGE %%%
*/

%%% DISENGAGE %%%
doSetify(cms_handleAMission, cms_handleAMission_ir),
doSetify(cms_handleAMission, cms_handleAMission_er),
%%% ENGAGE %%%


orchestration z::zut {
  variables { a as string;

  }
  activities {
    rcv. receive();
    a1. a:=ilLeFaut();
    rpl. reply();
  }
  relations { 
    rcv < a1 ; a1<rpl;
  }
}

