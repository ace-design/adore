/*
This composition is based on the corrected orchestration, i.e. the reports are memorized. 
 
ERROR :DataFlow and error management : 
 - Pbm : When computing the data flow on external ressources, the system detects an error: there are several possible activities following the execution end of the block : uER_a2 when a ressource was unavailable and rpl to reply when a worker is assigned.  
- Solution : Designer asks to consider the activity uER_a2 into the dataFlow. It means that each time a worker is unavailable, the system will ask the system to find a new solution. All the requests are executed in a conncurent way. We consider that the activity corresponding to the data flow will be terminated when all the workers will finish their task and the system will terminate to handle the problems.
- Knowledge : toSet er => setIn handleAMission_uER_a2


ERROR : Variable accessed and not initialized :
 - Pbm :When computing the data flow on external ressources, the system detects an error: the variable er can be uninitialized when accessed in reading. Indeed when the ressource is unavalaible no report is produced. 
This error can be detected before computing the resulting orchestration as the fragment implied doesn't deal with return variable for the hook
- Solution : the fragment is modified to take into account the return value.



WARNING : 
 Pbme : warning(areTheseActivitiesDuplicated, [cms_handleAMission_a51, cms_handleAMission_uIR_a2]))] 
 Solution : 
We call twice cms::requestExtRes but it's wanted.
 Knowledge : forget('areTheseActivitiesDuplicated',[cms_handleAMission_a51, cms_handleAMission_uIR_a2]).
*/

/*
Result of composition after taking into account problems encountered when composing fragments. 

composition cms::handleAMission {
  toSet ir; toSet er;                  // Main success scenario
  apply unavailableIntResource                      => a41; // Ext 4a.
  apply unavailableExtResource                      =>  {a51;a5x;} // Ext 5a.
  apply reHandleOnChange(cxt: 'm', crisis: 'crisis') => {a40;a41;a42;a4x;a9;a50;a51;a5x} // Ext 9a.
}
*/



orchestration cms::handleAMission {
  variables {
    crisis as crisisIdentifier;
    m as mission;      coord as cmsEmployee;
    ir as resource; er as resource;
    iw as cmsEmployee; ew as externalWorker;
    irep as report; erep as report;

    rHOC_mustWait as boolean; rHOC_c as boolean;

    uER_token as string;


  }
  activities {
    rcv. (coord,crisis, m) := receive();
    a9. ui::actListener(coord,m,'status' as string); 
    a40. ir := get(m,'intResource' as string);
    a41. iw := cms::findRelevantEmployee(ir);
    a42. cms::assignIntRes(iw,m);
    a4x. irep := cms::handleAWorker(crisis,iw, m);
    a4r. cms::memorizeReport(irep);

    a50. er := get(m,'extResource' as string);
    a51. ew := cms::requestExtRes(er,crisis,m);
    a5x. erep := cms::handleAWorker(crisis, ew, m,coord);
    a5r. cms::memorizeReport(erep);
    rpl. reply();
    a9bis. ui::stopListener(coord, m, 'status' as string); 

    uIR_a1. msgBus::send('status' as string,'unavailable' as string, ir);
    uIR_a2. iw := cms::requestExtRes(ir,crisis,m);

    uER_a0. erep := id('null' as report);
    uER_ac. uER_token := concat('unavailable' as string,er);
    uER_a1. msgBus::send('status' as string, uER_token , m);
    uER_a2. cms::handleCrisis(crisis);

    rHOC_a0. rHOC_mustWait := id('false' as boolean);
    rHOC_a1. msgBus::wait4msg('status' as string, 'change' as string, m);
    rHOC_a2. rHOC_mustWait := id('true' as boolean);
    rHOC_t. rHOC_c := isTrue(rHOC_mustWait);
    rHOC_a3. cms::handleACrisis(crisis);
    rHOC_a4. nop();
    rHOC_n. nop();

  }
  relations { 
    rcv < a40; a40 < a41; a41 < a42; a42 < a4x; 
    //a4x < rpl; <== toset ir
    rcv < a50; a50 < a51; a51 < a5x; 
    //a5x < rpl;
    a5x<<rpl;
    rcv < a9; a9 < a41; a9 < a51; rpl < a9bis; 
    a4x<a4r; a5x<a5r;

   fail(a41,'unavailable') < uIR_a1; uIR_a1 < uIR_a2; uIR_a2 < a4x; 

   fail(a51,'unavailable') < uER_a0;
   fail(a5x,'unavailable') <  uER_a0; 
   uER_a0<uER_ac; uER_ac<uER_a1;
    uER_a1 < uER_a2; uER_a2 << rpl;

 

   a4x <rHOC_n;
   a5x <rHOC_n;
   rHOC_n << rHOC_t; rHOC_t < rpl when !rHOC_c; rcv< rHOC_a0; 
   rHOC_a0 < rHOC_a1; rHOC_a1 < rHOC_a2; rHOC_a2 << rHOC_t; rHOC_a1 < rHOC_a3;    rHOC_a3 < rHOC_a4; rHOC_t < rHOC_a4 when rHOC_c; rHOC_a4 < rpl;
 
  }
}

%%% DISENGAGE %%%
doSetify(cms_handleAMission, cms_handleAMission_ir),
doSetify(cms_handleAMission, cms_handleAMission_er),
setIteration(cms_handleAMission_uER_a2,p2),
%%% ENGAGE %%%

fragment nop_2 {
  variables {}
  activities { n. nop(); }
}

