/** A simple file to explain ADORE execution semantic
 * @author: sebastien Mosser
 * @date: Tue May 18, 2010  2:41 PM
 **/

/**********************
 ** Simple Artefacts **
 **********************/

orchestration simple::controlFlow {   // Simple control flow
  variables {}
  activities {
    a0. receive();
    a1. nop();
    a2. nop();
    a3. reply();
  }
  relations { a0 < a1; a0 < a2; a1 < a3; a2 < a3;}
}

orchestration simple::weakWaitFlow {   // Weak wait flow
  variables {}
  activities {
    a0. receive();
    a1. nop();
    a2. nop();
    a3. reply();
  }
  relations { a0 < a1; a0 < a2; a1 << a3; a2 << a3; }
}

orchestration simple::guardedFlow {   // Guarded flow
  variables { c as boolean; }
  activities {
    a0. c := receive();
    a1. nop();
    a2. nop();
    a3. reply();
  }
  relations { a0 < a1 when c; a0 < a2 when !c; a1 < a3; a2 < a3;}
}

orchestration simple::faultyFlow {   // Exceptional flow
  variables {}
  activities {
    a0. receive();
    a1. nop();
    a2. nop();
    a3. reply();
  }
  relations { a0 < a1; a1 < a3; fail(a0,'fault') < a2; a2 < a3;}
}

/************************
 ** WeakWait Artefacts **
 ************************/

orchestration weakWaits::fullJoin { // WeakWait at the same level
  variables {}
  activities {
    a0. receive();
    a1. nop();
    a2. nop();
    a3. nop();
    a4. nop();
    a5. reply();
  }
  relations { 
    a0 < a1; a0 < a2; a0 < a3; a0 < a4; 
    a1 << a5; a2 << a5; a3 << a5; a4 << a5; 
  }
}

orchestration weakWaits::hierarchy { // WeakWait synchronization
  variables {}
  activities {
    a0. receive();
    a1. nop();
    a2. nop();
    a3. nop();
    a4. nop();
    sync1. nop();
    sync2. nop();
    a5. reply();
  }
  relations { 
    a0 < a1; a0 < a2; a0 < a3; a0 < a4; 
    a1 << sync1; a2 << sync1; a3 << sync2; a4 << sync2; 
    sync1 < a5; sync2 < a5; 
  }
}

/**********************
 ** Guards Artefatcs **
 **********************/

orchestration guards::transitivity {
  variables { c as boolean; }
  activities {
    a0. c := receive();
    a1. nop();
    a2. nop();
    a3. nop();
    a4. nop();
    a5. reply();
  }
  relations { 
    a0 < a1 when c; a0 < a2 when !c; a1 < a3; a2 < a4; a3 < a5; a4 < a5;
  }
}

orchestration guards::parallel {
  variables { c1 as boolean; c2 as boolean; }
  activities {
    a0. receive();
    a1. c1 := nop();
    a2. c2 := nop();
    a3. nop();
    a4. nop();
    a5. nop();
    a6. nop();
    a7. reply();
  }
  relations {
    a0 < a1; a0 < a2; 
    a1 < a3 when c1; a1 < a4 when !c1;
    a2 < a5 when c2; a2 < a6 when !c2;
    a3 < a7; a4 < a7; a5 < a7; a6 < a7;
  }
}

orchestration guards::intricated {
  variables { c1 as boolean; c2 as boolean; }
  activities {
    a0. receive();
    a1. c1 := nop();
    a2. c2 := nop();
    a3. nop();
    a4. nop();
    a5. nop();
    a6. reply();
  }
  relations {
    a0 < a1;  
    a1 < a3 when c1; a1 < a2 when !c1;
    a2 < a4 when c2; a2 < a5 when !c2;
    a3 < a6; a4 < a6; a5 < a6;
  }
}

orchestration guards::fullyMelted {
  variables { c1 as boolean; c2 as boolean; }
  activities {
    a0. receive();
    a1. c1 := nop();
    a2. c2 := nop();
    a3. nop();
    a4. nop();
    a5. nop();
    a6. nop();
    a7. reply();
  }
  relations {
    a0 < a1; a0 < a2;  
    a1 < a3 when c1; a1 < a4 when c1;  a1 < a5 when !c1; a1 < a6 when !c1;
    a2 < a3 when c2; a2 < a4 when !c2; a2 < a5 when c2;  a2 < a6 when !c2;
    a3 < a7; a4 < a7; a5 < a7; a6 < a7;
  }

}

/**************************
 ** Exceptions Artefacts **
 **************************/

orchestration faults::intricated {
 variables {}
  activities {
    a0. receive();
    a1. nop();
    a2. nop();
    a3. nop();
    a4. nop();
    a5. nop();
    a6. reply();
  }
  relations { 
    a0 < a1; a1 < a6; fail(a0,'f1') < a2; a2 < a3; fail(a2,'f2') < a4; 
    a3 < a5; a4 < a5; a5 < a6;
  }
}


orchestration faults::faultJoin {
  variables {}
  activities {
    a0. receive();
    a1. nop();
    a2. nop();
    a3. nop();
    a4. nop();
    a5. reply();
  }
  relations { 
    a0 < a1; fail(a0,'f1') < a2; fail(a0,'f2') < a3; 
    a2 < a4; a3 < a4; a4 < a5;
    a1 < a5;
  }
}

/*******************************
 ** Mixed Relations Artefacts **
 *******************************/

orchestration mixed::controlAndWeaks { 
variables {}
 activities {
    a0. receive();
    a1. nop();
    a2. nop();
    a3. nop();
    a4. reply();
  }
  relations { a0 < a1; a0 < a2; a0 < a3; a1 < a4; a2 << a4; a3 << a4; }
}

orchestration mixed::controlAndFaults {
  variables {}
  activities {
    a0. receive();
    a1. nop();
    a2. nop();
    a3. nop();
    a4. reply();
  }
  relations { 
    a0 < a1;  fail(a0,'f1') < a2; fail(a0,'f2') < a3; 
    a1 < a4; a2 < a4; a3 < a4;
  }
}



/*****************
 ** Limitations **
 *****************/

orchestration limitations::controlAndWeakedFaults {
  // @related mixed::controlAndFaults
  // @problem: doesn't make sense at all
  variables {}
  activities {
    a0. receive();
    a1. nop();
    a2. nop();
    a3. nop();
    a4. reply();
  }
  relations { 
    a0 < a1;  fail(a0,'f1') < a2; fail(a0,'f2') < a3; 
    a1 < a4; a2 << a4; a3 << a4;
  }
}





/*******************
 ** Old Artefacts **
 *******************/

/*
orchestration semantic::test1 {
  variables {
    c1 as boolean; c2 as boolean;
  }
  activities {
    a0. c1 := nop();
    a1. nop();
    a2. nop();
    a3. receive();
    a4. c2 := nop();
    a5. nop();
    a6. nop();
    a7. reply();
  }
  relations{
    a3 < a4; a3 < a0; 
    a4 < a5 when c2; a4 < a6 when !c2; a5 < a7; a6 < a7;
    a0 < a1 when c1; a0 < a2 when !c1; a1  < a7; a2 < a7;
  }
}

orchestration semantic::test2 {
  variables {
    c1 as boolean; c2 as boolean;
  }
  activities {
    a0. c1 := nop();
    a1. nop();
    a2. nop();
    a4. c2 := receive();
    a5. nop();
    a6. reply();
  }
  relations {
    a4 < a5 when c2; a4 < a0 when !c2; a5 < a6;
    a0 < a2 when c1; a0 < a1 when !c1;
    a1 < a6; a2 < a6;
    
  }
}

orchestration semantic::test3 {
  variables {
    c1 as boolean; c2 as boolean;
  }
  activities {
    a0. receive();
    a1. c1 := nop();
    a2. c2 := nop();
    a3. nop();
    a4. nop();
    a5. nop();
    a6. nop();
    a7. reply();
  }
  relations {
    a0 < a1; a0 < a2; 
    a1 < a3 when c1; a1 < a4 when c1; a1 < a5 when !c1; a1 < a6 when !c1;
    a2 < a3 when c2; a2 < a4 when !c2; a2 < a5 when c2; a2 < a6 when !c2;
    a3 < a7; a4 < a7; a5 < a7; a6 < a7;
  }
}
*/

