// 

//CMS => Crisis Management System 
//coordinatorSystem => User Interface for Coordinator 

//4.2.1 Not finished
//I assume that the system deals with only one Crisis at once.

//Use Case 1: Resolve Crisis 
//The initial scenario is defined without loops.
//They are expressed as evolutions : We no more work on a ressource but on a set of ressources.

//Witness places a call to the crisis centre, where it is answered by a Coordinator. 
//1. Coordinator captures witness report (UC 2). 
//2. System recommends to Coordinator the missions that are to be executed based on the current information about the crisis and resources. 
//3. Coordinator selects one or more missions recommended by the system. 
//Perso : 1) We define the initial scenario with one mission. An evolution adds the possibility for the coordinator to select a set of missions.
//For each mission in parallel: 
//4. For each internal resource required by a selected mission, System assigns an internal resource (UC 3). 
//5. For each external resource required by a selected mission, System requests an external resource (UC 4). 
//Perso : the following steps 6-11 are taken into account in manageRessource
  //6. Resource notiﬁes System of arrival at mission location. 
  //7. Resource executes the mission (UC 5). 
  //8. Resource notiﬁes System of departure from mission location. 
  //9. In parallel to steps 6-8, Coordinator receives updates on the mission status from System. 
  //10. In parallel to steps 6-8, System informs Resource of relevant changes to mission / crisis information. 
  //11. Resource submits the ﬁnal mission report to System. 
//Perso : a dedicated service is defined for the following : cms::setNewCrisisInformation, 
   //12. In parallel to steps 4-8, Coordinator receives new information about the crisis from System. 
//13. Coordinator closes the ﬁle for the crisis resolution. 
//Use case ends in success. 
orchestration cms::resolve {
  variables {
    
    mission* as mission;
    selectedMission as mission;
    internalRessource as ressource;
    externalRessource as ressource;
  }
  activities {
    a0) receive();
    a1) cms::witnessReportCapture();
    a2) mission* := cms::missionsToDo();
    a3) selectedMission := coordinatorSystem::select(mission*);
     //System assigns internal Ressource(s)
       a4a) internalRessource := getInternalRessources(selectedMission);
       a4a2) cms::assignInternalRessources(internalRessource,selectedMission);
       a4a3) cms::manageRessource(internalRessource,selectedMission);
      //System requests external Ressources    
       a5a) externalRessource := getExternallRessources(selectedMission);
       a5a2) cms::assignExternalRessources(externalRessource,selectedMission);
       a5a3) cms::manageRessource(externalRessource,selectedMission);  
    a13) coordinatorSystem::close();
    a6)reply();
  }
  relations { a0 < a1; a1 < a2; a2<a3; a3<a4a ; a4a<a4a2; a4a2<a4a3; a4a3<a13; a3<a5a;a5a<a5a2;a5a2<a5a3;a5a3<a13; a13<a6;}
}





orchestration cms::manageRessource{
  variables {
    r as ressource;
    m as mission;
  }
  activities {
    a0) (r,m) := receive();
    a1) ressourceManager::askForArrival(r,m);
    //a1a)coordinatorSystem::notify('arrived' as string,r,m);
    a2) ressourceManager::askForExecutionEnd(r,m);
    //a2a)coordinatorSystem::notify('endExecution'  as string,r,m);
    a11)ressourceManager::askForfinalMissionReport(r,m);
    a3) reply('true' as boolean);
  }
  relations { a0 < a1;  a1 < a2;a2<a11; a11<a3;}
}





orchestration cms::setNewCrisisInformation{
  variables {
    i as crisisInformation;
    relevant as boolean;
  }
  activities {
    a0) (i) := receive();
    //a12) coordinatorSystem::notify('newInfo'  as string,i);
    a1) relevant := cms::isRelevantInformation(i);
    a10) ressourceManager::notify(i);
    r) reply();
  }
  relations { a0 < a1; a1 < a10 when relevant; a1 < r ;}
}


// 4.2.2
//Capture Witness Report 
//Use Case 2: Capture Witness Report 
//Scope: Car Crash Crisis Management System 
//1. Coordinator provides witness information1 to System as reported by the witness. 
//2. Coordinator informs System of location and type of crisis as reported by the witness. 
//In parallel to steps 2-4: 
//2a.1 System contacts PhoneCompany to verify witness information. 
//2a.2 PhoneCompany sends address/phone information to System. 
//2a.3 System validates information received from the PhoneCompany. 
//3. System provides Coordinator with a crisis-focused checklist. 
//4. Coordinator provides crisis information2 to System as reported by the witness. 
//5. System assigns an initial emergency level to the crisis and sets the crisis status to active. 
//Use case ends in success. 

orchestration cms::witnessReportCapture {
  variables {
    wi as witnessInformation;
    li as locationInformation;
    adress as adressInformation;
    exact as boolean;
    ci as crisisInformation;
    cl as checkList;
    cms as crisisManager;
  }
  activities {	
    a0) receive();
    a1) wi := coordinatorSystem::provideWitnessInformation();
    a2) li := coordinatorSystem::provideLocationInformation();
    a2a12) adress := phoneCompany::getClientInformation(wi);
    a2a3) exact := cms::validateInformation(adress,wi);
    a3) cl := cms::computeCheckList();
    a4) ci := coordinatorSystem::provideCrisisInformation(cl);
    a5) setCurrentCrisisActive(cms,ci);
    a6) reply();

  } 
  relations { a0 < a1; a1 < a2; a1<a2a12; a2<a2a3; a1<a3; a3<a4; a2<a4; a4<a5; a5<a6;a2a3<a6;} 
}


// 4.2.2
orchestration cms::assignInternalResource {
  variables {
    m as mission;
    e as employee;
    li as locationInformation;
    adressInformation as adressInformation;
    accept as boolean;
    ci as crisisInformation;
  }
  activities {	
    a0) m := receive();
    a1) e := cms::selectEmployee(m);
    a2) accept := employeeCms::askFor(e,m);
    a6) reply(e);

  } 
  relations { a0 < a1; a1 < a2; a2<a6 ; } 
}


// 4.2.2
orchestration cms::assignExternalResource {
  variables {
    m as mission;
    eS as externalRessource;
    allocatedRessource as externalRessource;
  }
  activities {	
    a0) m := receive();
    a1) eS := cms::selectExternalRessource(m);
    a2) allocatedRessource := eRS::request(eS,m);
    a6) reply(allocatedRessource);

  } 
  relations { a0 < a1; a1 < a2; a2<a6 ; } 
}


//4.2.7 part 3
orchestration cms::setNewVictimInformation {
  variables {
    info as information;
    hostpitalInfo as information;
  }
  activities {	
    a0) info := receive();
   //System requests victim’s medical history information "from all"connected HospitalResourceSystems. 
   a1) hostpitalInfo := hospitalResourceSystems::getInfo(info);
   a2) reply(hostpitalInfo);
  } 
  relations { a0 < a1; a1 < a2; } 




//-----------------------------------------------


//4.2.5
//n'importequoi a revoir totalement
orchestration superObserver::executeMission {
  variables {
    m as mission;
    mission* as mission;
    cL as checkList;
    q as question;
    ci as crisisInformation;
  }
  activities {	
    a0) m := receive();
    a1) cL := cms::getCrisisSpecificCheckList(m);
    //SuperObserver feeds System with crisis information 
    //(one by one according to the check list)
    //a2 onSet(cL,q,next,all)   
    a2) q := next(cL);
    a2b) ci := superObserver::getInformation(q);
    a2c) cms::setNewCrisisInformation(ci);
    // end set
    //System suggests crisis-speciﬁc missions to SuperObserver
    a3) mission* := cms::missionsToDo();
   //SuperObserver notiﬁes System of the type of mission he wants to create...step 4 to 8
    a4) superObserver::dealWithMissions(mission*);
   //SuperObserver judges that his presence is no longer needed at the crisis location. 
    a9) ressourceManager::setExcutionEnd(m);
  } 
  relations { a0 < a1; a1 < a2; a2<a2b; a2b<a2c ;a2<a3;a3<a4;a4<a9; } 
}




orchestration workerSystem::executeMission {
  variables {
    m as mission;
    mission* as mission;
    cL as checkList;
    q as question;
    ci as crisisInformation;
    info as information;
    b as boolean;
  }
  activities {	
    a0) m := receive();
    //FirstAidWorker transmits injury information of victim to System. 
    a1a) ci := workerSystem::getVictimInjuryInformation();
    a1b) cms::setNewCrisisInformation(ci);
    //2. FirstAidWorker determines victim’s identity and communicates it to System. 
    a2a)  (b,info) := workerSystem::getVictimInformation();
    a2b) cms::setNewVictimInformation(b);
    //
    x) cms::getHospitalFor(ci);

    // end set
    //System suggests crisis-speciﬁc missions to SuperObserver
    a3) mission* := cms::missionsToDo();
   //SuperObserver notiﬁes System of the type of mission he wants to create...step 4 to 8
    a4) superObserver::dealWithMissions(mission*);
   //SuperObserver judges that his presence is no longer needed at the crisis location. 
    a9) ressourceManager::setExcutionEnd(m);
  } 
  relations { a0 < a1a; a1a < a1b; a0<a2a; a2a<a2b ;a2b<x;a1b<a3;a3<a4;a4<a9; } 
}
