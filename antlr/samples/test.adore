fragment e1 <x,y> {
  variables  {}
  activities { h. hook() ; }
  relations  { ^ < h; h < $; }
}


fragment e2 {
  variables  {} 
  activities { h.  hook() ; }
  relations  { ^ < h; h < $; }
}


orchestration helloWorld::sayHello {
  variables { 
    name as string;   name* as string;
    result as string; result* as string;
    const prefix := 'Hello, ' as string;
  }
  activities {
    a1. name* := receive();
    a2. result := stringConcat(prefix, name);
    test. nop(name);
    a3. reply(result*);
  }
  relations { a1 < a2; a2 < test; fail(a2,'foo bar') < a3; fail(a2) < a3; }
}

%%% DISENGAGE %%%
  defPolicy(p0,forall(helloWorld_sayHello_name,helloWorld_sayHello_name_star),
	    append(helloWorld_sayHello_result,helloWorld_sayHello_result_star)),
  setIteration(helloWorld_sayHello_a2,p0),  
  setIteration(helloWorld_sayHello_test,p0),  
%%% ENGAGE %%%

composition helloWorld::sayHello as foo { 
      apply e2 => e1::h;
      apply e1(x: 'X', y: 'bar') => {a1,a2} ; 
      toSet name ;
}

fragment authBySeb {
  variables {
    logged as boolean;
    auth as boolean;
    user as struct;
  }
  activities {
    logTest. logged := auth::isLogged(user) ;
    authTest. auth := auth::authenticates(user) ;
    h. hook(user) ;
    error. throw('UnauthorizedAccess' as string) ;
    nop1. nop();
    nop2. nop();
  }
  relations {
    ^ < logTest ;
    logTest < nop1 when logged ;
    logTest < authTest when ! logged ;
    authTest < nop2 when auth ;
    authTest < error when ! auth;
    nop1 << h; nop2 << h;
    h < $;
  }
}
