/** PicWeb Fragment, extracted from 'PicWeb - Data.jucm' file
 * @author: Sebastien Mosser
 * @date: Wed May 26, 2010 10:29 AM
 * @version: 1.0
 **/

/*************************
 *** /!\ WITH DATA /!\ ***
 *************************/

/****************************************************************
 ** Initial artefacts, generated directly from AoURN artefacts **
 ****************************************************************/

// From 'PicasaService' UCM
fragment picasaService {
  variables { 
    pictures as pictures;  tag as tag;
    picasaPictures as picasaPictures;
  }
  activities {
    act1. pictures := hook(tag);
    act2. picasaPictures := picasa::exploreFolksonomy(tag);
    act3. pictures := merge::mergeResult(picasaPictures, pictures);
  }
  relations {^ < act1; ^ < act2; act1 < act3; act2 < act3; act3 < $;}
}
depict picasaService using 'skyblue';
/*% doRefactor(picasaService) %*/

// From 'Caching' UCM
fragment caching {
  variables { 
    condition as boolean; exists as boolean; tag as tag; pictures as pictures;
  }
  activities {
    act1. exists := cacheServer::checkCache(tag);
    act2. condition := isTrue(exists);
    act3. pictures := dataRepository::read(tag);
    act4. pictures := hook(tag);
    act5. dataRepository::store(tag, pictures);
  }
  relations {
    ^  < act1; act1 < act2; 
    act2 < act3 when condition; act2 < act4 when !condition; 
    act3 < $; act4 < act5; act5 < $;
  }
}
depict caching using 'darkseagreen3';
/*% doRefactor(caching) %*/

// From 'Randomizer' UCM
fragment randomizer { 
  variables { pictures as pictures; }
  activities {
    act1. pictures := shuffle::randomize(pictures);
    act2. hook();
  }
  relations { ^ < act1; act1 < act2; act2 < $; }
}
depict randomizer using 'burlywood';
/*% doRefactor(randomizer) %*/

// From 'Payment' UCM
fragment payment {
  variables { 
    condition as boolean; pictures as pictures; tag as tag;
    nrRequests as nrRequests; requestLimit as requestLimit;
  }
  activities {
    act1. condition := isGreaterThan(nrRequests,requestLimit);
    act2. returnNoPhotos();
    //act3. pictures := hook(tag);
    act3. hook();
  }
  relations {
    ^ < act1; act1 < act2 when condition; act1 < act3 when !condition; 
    act3 < $; act2 < $;
  }
} 
depict payment using 'lavenderblush';
/*% doRefactor(payment) %*/

/*************************************************
 ** Final Artefacts (after requirement changes) **
 *************************************************/

fragment paymentFinal {
  variables { 
    condition as boolean; pictures as pictures; tag as tag;
    nrRequests as nrRequests; requestLimit as requestLimit;
    const flickr := 'flickr' as string;
  }
  activities {
    act1. condition := isGreaterThan(nrRequests,requestLimit);
    act2. pictures := returnNoPhotos();
    act3. pictures := hook(tag);
    act4. requestLimit := counter::getLimit(flickr);
    act5. nrRequests := counter::get(flickr);
    act6. counter::increment(flickr);
  }
  relations {
    ^ < act4; ^ < act5; 
    act4 < act1; act5 < act1; act1 < act2 when condition; 
    act1 < act3 when !condition; act3 < act6; act6 < $; act2 < $;
  }
} 
depict paymentFinal using 'lavenderblush';
/*% doRefactor(paymentFinal) %*/
