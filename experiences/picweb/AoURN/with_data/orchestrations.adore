/** PicWeb Orchestrations, extracted from 'PicWeb - Data.jucm' file
 * @author: Sebastien Mosser
 * @date: Wed May 26, 2010 10:29 AM
 * @version: 1.1
 **/

/*************************
 *** /!\ WITH DATA /!\ ***
 *************************/

/****************************************************************
 ** Initial artefacts, generated directly from AoURN artefacts **
 ****************************************************************/

orchestration truncate::truncate {
  variables { 
    condition as boolean; threshold as threshold; pictures as pictures;
    nrPhotos as nrPhotos;
  }
  activities {
    act1. receive();
    act2. condition := isGreaterThan(nrPhotos, threshold);
    act3. pictures := limitNumberOfPictures(pictures, threshold);
    act4. reply();
  }
  relations {
    act1 < act2; act2 < act3 when condition; act2 < act4 when !condition; 
    act3 < act4;
  }
}
/*% doRefactor(truncate_truncate) %*/ 
// Summary: in(nrPhotos, threshold, pictures), out(pictures).

// From 'PicWeb' UCM
orchestration picweb::getPictures {
  variables { tag as tag; pictures as pictures; }
  activities {
    act1. receive();
    act2. pictures := flickr::getPicturesWithTag(tag);
    act3. truncate::truncate();
    act4. reply();
  }
  relations { act1 < act2; act2 < act3; act3 < act4; }
}
/*% doRefactor(picweb_getPictures) %*/ 
// Summary: enrich(act3(+nrPhotos, +threshold, +pictures)), 
//          in(nrPhotos, threshold, pictures), out(pictures) 

/************************************************
 ** Final artefacts (after requirement change) **
 ************************************************/

orchestration truncate::final {
  variables { 
    condition as boolean; threshold as threshold; pictures as pictures;
    nrPhotos as nrPhotos;
  }
  activities {
    act1. receive();
    act2. condition := isGreaterThan(nrPhotos, threshold);
    act3. pictures := limitNumberOfPictures(pictures, threshold);
    act4. reply();
    act5. nrPhotos := getLength(pictures); // ADDED AT REQ. LVL
  }
  relations {
    act1 < act5; act5 < act2; act2 < act3 when condition; 
    act2 < act4 when !condition; act3 < act4;
  }
}
/*% doRefactor(truncate_final) %*/

orchestration picweb::final {
  variables { 
    tag as tag; pictures as pictures;             // initial
  }
  activities {
    act1. receive();
    act2. pictures := flickr::getPicturesWithTag(tag);
    act3. truncate::final();
    act4. reply();
  }
  relations { act1 < act2; act2 < act3; act3 < act4; }
}
/*% doRefactor(picweb_final) %*/
